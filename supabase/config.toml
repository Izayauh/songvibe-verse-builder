
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "uekjpewosraagvbbpjbz"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. public and storage are always included.
schemas = ["public", "storage", "graphql_public"]
# Extra schemas to add to the search_path of every request. public is always included.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a table, view, materialized view, or function.
# Setting this provides a safeguard against accidents.
max_rows = 1000

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version_num;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv6)
# ip_version = "IPv6"

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1:54321"
# OpenAI API Key to use for Supabase AI.
openai_api_key = "env(OPENAI_API_KEY)"

# Email template fetching from remote enabled.
[studio.auth]
external_email_templates = true

[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# Which secure email templates to use. Options include "auth_confirmation", "auth_invite",
# "auth_magic_link", "auth_recovery", "auth_email_change_confirmation_new", and "auth_email_change_confirmation_current".
# secure_email_change_enabled = true
# max_frequency = "1s"

# Use a production-ready SMTP server
# [auth.email.smtp]
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = true
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending a confirmation OTP via SMS.
# Must contain a {{ .Code }} placeholder for the verification code.
template = "Your code is {{ .Code }} ."
# Which secure SMS templates to use. Options include "sms_confirmation", "sms_invite",
# "sms_magic_link", "sms_recovery", and "sms_change_phone".
# secure_sms_change_enabled = true
# max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# Use an external OAuth provider. The full list of providers are:
# `apple`, `azure`, `bitbucket`, `discord`, `facebook`, `figma`, `github`, `gitlab`,
# `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`, `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = "env(APPLE_CLIENT_ID)"
secret = "env(APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(APPLE_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(APPLE_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.azure]
enabled = false
client_id = "env(AZURE_CLIENT_ID)"
secret = "env(AZURE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(AZURE_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(AZURE_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.bitbucket]
enabled = false
client_id = "env(BITBUCKET_CLIENT_ID)"
secret = "env(BITBUCKET_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(BITBUCKET_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(BITBUCKET_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.discord]
enabled = false
client_id = "env(DISCORD_CLIENT_ID)"
secret = "env(DISCORD_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(DISCORD_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(DISCORD_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.facebook]
enabled = false
client_id = "env(FACEBOOK_CLIENT_ID)"
secret = "env(FACEBOOK_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(FACEBOOK_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(FACEBOOK_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.figma]
enabled = false
client_id = "env(FIGMA_CLIENT_ID)"
secret = "env(FIGMA_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(FIGMA_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(FIGMA_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.github]
enabled = false
client_id = "env(GITHUB_CLIENT_ID)"
secret = "env(GITHUB_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(GITHUB_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(GITHUB_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.gitlab]
enabled = false
client_id = "env(GITLAB_CLIENT_ID)"
secret = "env(GITLAB_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(GITLAB_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(GITLAB_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.google]
enabled = false
client_id = "env(GOOGLE_CLIENT_ID)"
secret = "env(GOOGLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(GOOGLE_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(GOOGLE_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.keycloak]
enabled = false
client_id = "env(KEYCLOAK_CLIENT_ID)"
secret = "env(KEYCLOAK_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(KEYCLOAK_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(KEYCLOAK_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.linkedin_oidc]
enabled = false
client_id = "env(LINKEDIN_OIDC_CLIENT_ID)"
secret = "env(LINKEDIN_OIDC_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(LINKEDIN_OIDC_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(LINKEDIN_OIDC_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.notion]
enabled = false
client_id = "env(NOTION_CLIENT_ID)"
secret = "env(NOTION_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(NOTION_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(NOTION_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.twitch]
enabled = false
client_id = "env(TWITCH_CLIENT_ID)"
secret = "env(TWITCH_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(TWITCH_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(TWITCH_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.twitter]
enabled = false
client_id = "env(TWITTER_CLIENT_ID)"
secret = "env(TWITTER_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(TWITTER_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(TWITTER_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.slack]
enabled = false
client_id = "env(SLACK_CLIENT_ID)"
secret = "env(SLACK_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(SLACK_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(SLACK_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.spotify]
enabled = false
client_id = "env(SPOTIFY_CLIENT_ID)"
secret = "env(SPOTIFY_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(SPOTIFY_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(SPOTIFY_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.workos]
enabled = false
client_id = "env(WORKOS_CLIENT_ID)"
secret = "env(WORKOS_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(WORKOS_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(WORKOS_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.external.zoom]
enabled = false
client_id = "env(ZOOM_CLIENT_ID)"
secret = "env(ZOOM_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(ZOOM_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(ZOOM_URL)"
# If set to true, does not immediately redirect and instead returns the provider_token and
# provider_refresh_token directly to allow the developer to redirect themselves.
skip_nonce_check = false

[auth.hook.mfa_verification_attempt]
enabled = false
uri = "env(MFA_VERIFICATION_ATTEMPT_HOOK_URI)"
secrets = "env(MFA_VERIFICATION_ATTEMPT_HOOK_SECRETS)"

[auth.hook.password_verification_attempt]
enabled = false
uri = "env(PASSWORD_VERIFICATION_ATTEMPT_HOOK_URI)"
secrets = "env(PASSWORD_VERIFICATION_ATTEMPT_HOOK_SECRETS)"

[auth.hook.custom_access_token]
enabled = false
uri = "env(CUSTOM_ACCESS_TOKEN_HOOK_URI)"
secrets = "env(CUSTOM_ACCESS_TOKEN_HOOK_SECRETS)"

[auth.hook.send_sms]
enabled = false
uri = "env(SEND_SMS_HOOK_URI)"
secrets = "env(SEND_SMS_HOOK_SECRETS)"

[auth.hook.send_email]
enabled = false
uri = "env(SEND_EMAIL_HOOK_URI)"
secrets = "env(SEND_EMAIL_HOOK_SECRETS)"

[edge_runtime]
enabled = true
# Configure one of the supported pooler modes: `transaction`, `session`.
inspector_port = 8083
# Configure one of the supported pooler modes: `transaction`, `session`.
policy = "per_worker"
# Configure one of the supported pooler modes: `transaction`, `session`.
[edge_runtime.policy.per_worker]
# Configure one of the supported pooler modes: `transaction`, `session`.
events_per_worker = 10
# Configure one of the supported pooler modes: `transaction`, `session`.
# Configure one of the supported pooler modes: `transaction`, `session`.

[functions.seedTrending]
verify_jwt = false

[functions.seedTrending.cron]
schedule = "0 4 * * *"
region = "us-east-1"

[analytics]
enabled = false
port = 54327
vector_port = 54328
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres-Wasm instances to import from pg_prove-generated SQL scripts
# (proof of concept)
webhooks_port = 54321
# Configure one of the supported pooler modes: `transaction`, `session`.
s3_host = "env(S3_HOST)"
s3_region = "env(S3_REGION)"
s3_access_key = "env(S3_ACCESS_KEY)"
s3_secret_key = "env(S3_SECRET_KEY)"
